/*
 * This code contains the code for 'Customer'
 * The Customer generates 100 money order with the same amount, but different serial numbers
 * and gets one of the money orders blind signed by the Bank
 * The customer then hands the money order to the Merchant 
 */

package digitalcash;

import java.io.*;
import java.util.Random;
import java.util.UUID;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.SecureRandom;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;

// TODO: Auto-generated Javadoc
/**
 * The Class CustomerFrame.
 */
public class CustomerFrame extends javax.swing.JFrame 
{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/** The filename. */
	static String filename = "custpk.txt";
	
	/** The L_ identity. */
	static String [] L_Identity = new String [100];
	
	/** The R_ identity. */
	static String [] R_Identity = new String [100];
	
	/** The n. */
	static int n = 1;		 
	
	/** The transaction amount. */
	static String transactionAmount = "100.0";	 
	
	/** The money order array. */
	public static String[] moneyOrderArray = new String [100]; 
    
    /** The num money orders. */
    public static int numMoneyOrders = 100;     
    
    /** The Pflag. */
    public static int Pflag = 0;
    
    /** The p. */
    public static String P = "";
    
    /** The uniqueness. */
    private static String uniqueness;
    
    /** The Constant identity. */
    private static final String identity = "Alice 777 Cross road, Baltimore";
    
    /** The Identity string. */
    static String [] IdentityString = new String [100];
    
    /** The sendtobank. */
    static BigInteger[] sendtobank = new BigInteger [100];
    
    /** The Signed m ofrombank. */
    static BigInteger SignedMOfrombank;
    
    /** The Signed mo. */
    static byte[] SignedMo;
    
    /** The s. */
    static BigInteger s;
      
    /**
      * Instantiates a new customer frame.
      */
     public CustomerFrame() {
        initComponents();
        jButton1.setActionCommand("SendMO");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */  
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        setTitle("Customer");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Send money order to bank");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Send money order to merchant");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(96, 96, 96)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(85, 85, 85)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * J button1 mouse clicked.
     *
     * @param evt the evt
     */
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) 
    {
    	//GEN-FIRST:event_jButton1MouseClicked
       try 
       {
        // TODO add your handling code here:            	   

           RSAPublicKey pubKey;
           RSAPrivateKey privKey;        
           //generate the RSA key pair
           KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
           //initialise the KeyGenerator with a random number.
           keyGen.initialize(1024, new SecureRandom());
           KeyPair keypair = keyGen.genKeyPair();
           privKey = (RSAPrivateKey)keypair.getPrivate();
           pubKey = (RSAPublicKey)keypair.getPublic();   
           BigInteger pubmodulus = pubKey.getModulus();
           BigInteger publicexpon = pubKey.getPublicExponent();
           
           SecureRandom random = new SecureRandom();
           byte [] randomBytes = new byte[10];
           BigInteger r = null;        
           BigInteger gcd = null;
           BigInteger one = new BigInteger("1");       
           do 
           {
               random.nextBytes(randomBytes);
               r = new BigInteger(1, randomBytes);
               gcd = r.gcd(pubmodulus);
               //System.out.println("gcd: " + gcd);
           }
           while(!gcd.equals(one) || r.compareTo(pubmodulus)>=0 || r.compareTo(one)<=0);
       
           for (int i = 0; i < numMoneyOrders; i++) 
           {              
                for (int k=0; k<n; k++)
                {            	
                	String M = identity; 
                	M = new BigInteger(M.getBytes()).toString(2);            	
                	String L = generateKey(M);            
                	String R = "";
                	for (int j = 0; j < M.length() && j < L.length(); j++) 
                	{
                		R += M.charAt(j) ^ L.charAt(j);
                	}          	  
                	L_Identity[k] = L;            	             	
                	R_Identity[k] = R;
                }
                uniqueness = UUID.randomUUID().toString();
                    
                String line = transactionAmount;	
                line = line.concat (":");
                line = line.concat (uniqueness);
                
                /*
                for (int j=0; j<n; j++)
   			 	{
   				 line = line.concat (":");
   				 line = line.concat (L_Identity[j]);
   				 line = line.concat (",");
   				 line = line.concat (R_Identity[j]);						        
   			 	}
                 */
                moneyOrderArray[i] = line;
           }
           for (int i = 0; i < numMoneyOrders; i++) 
           {   
           	BigInteger m = new BigInteger(moneyOrderArray[i].getBytes("UTF8"));
           	BigInteger b = ((r.modPow(publicexpon,pubmodulus)).multiply(m)).mod(pubmodulus);
           	sendtobank[i] = b;
           }
           
           byte[] key = pubKey.getEncoded();
           FileOutputStream custkey = new FileOutputStream(filename);
           custkey.write(key);
           custkey.close();       
        
           ObjectOutputStream out = null;         
           ObjectInputStream in = null;
           Socket connectionSocket = new Socket("localhost",8888);       
           try
           {  	             	                                           
        	   out = new ObjectOutputStream(connectionSocket.getOutputStream());
        	   out.flush();
        	   out.writeObject(sendtobank);
        	   out.flush();
        	   CustomerFrame.jTextArea1.append("Money Order Array Sent to Bank \n");
        	
        	   out = new ObjectOutputStream(connectionSocket.getOutputStream());
        	   out.flush();
        	   out.writeObject(r);
        	   out.flush();        	
        	  
        	   in = new ObjectInputStream(connectionSocket.getInputStream());        	
        	   SignedMo = (byte[]) in.readObject();
        	
        	   in = new ObjectInputStream(connectionSocket.getInputStream());        	
        	   SignedMOfrombank = (BigInteger) in.readObject();                             	
        	   CustomerFrame.jTextArea1.append("Signed Money Order Received from Bank \n");
        	
        	   s =  SignedMOfrombank.multiply(r.modPow(publicexpon.negate(), pubmodulus)).mod(pubmodulus);
           }
           finally
           {
        	   try
        	   {        
        		   in.close();
        		   out.close();        		
        		   connectionSocket.close();
        	   }
        	   catch(IOException ioException)
        	   {
        		   ioException.printStackTrace();
        	   }
           }
       }
       catch(Exception ex) 
       {
    	   System.out.println("ERROR: ");
    	   ex.printStackTrace();
       }
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * J button2 action performed.
     *
     * @param evt the evt
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) 
    {
    	//GEN-FIRST:event_jButton2ActionPerformed
    	try 
    	{
    		ObjectOutputStream Out1 = null;
    		ObjectInputStream in = null;
    		ServerSocket ServerMerchantSocket = null;            
    		ServerMerchantSocket = new ServerSocket(5678);
    		Socket connection = ServerMerchantSocket.accept();
    	
    		Out1 = new ObjectOutputStream(connection.getOutputStream());
    		Out1.flush();
    		Out1.writeObject(SignedMo);
    		Out1.flush();
    	
    		Out1 = new ObjectOutputStream(connection.getOutputStream());
    		Out1.flush();
    		Out1.writeObject(SignedMOfrombank);
    		Out1.flush();
    		
    		CustomerFrame.jTextArea2.append("Signed Money Order sent to Merchant \n");
    	
    		//unblind signed envelope     	
    		Out1 = new ObjectOutputStream(connection.getOutputStream());
    		Out1.flush();
    		Out1.writeObject(s);
    		Out1.flush();
    	     
    		/*
    		FileWriter fw = new FileWriter("idstring.txt");
    		BufferedWriter writer = new BufferedWriter(fw);
    		*/
		
    		in = new ObjectInputStream(connection.getInputStream());
    		String bit_vector = (String) in.readObject();
    	
    		CustomerFrame.jTextArea2.append("Bit vector received from Merchant \n");
    		
    		/*
    		//0 -> left; 1 -> right
    		for (int j=0; j< bit_vector.length(); j++)
    		{
    			if(bit_vector.charAt(j) == '1')
    			{
    				L_Identity[j] = ",";
    			}
    			else
    			{
    				R_Identity[j] = ",";
    			}
    			String line = null;
      			if(L_Identity[j] != null)
      				line = L_Identity[j];
    			
      			if(R_Identity[j] != null)
      				line = line.concat(R_Identity[j]);
      			
    			IdentityString[j] = line;
    			writer.write(line);            	
    		}            	
    		writer.close();
    		*/
    		Out1.close();
    		in.close();
    		connection.close();
    		ServerMerchantSocket.close();
        
    	} catch(Exception ex) 
    	{
    		System.out.println("ERROR: ");
    		ex.printStackTrace();
    	}     
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Generate key.
     *
     * @param M the m
     * @return the string
     */
    public static String generateKey(String M) 
    {    	 
         String key = "";
         for (int i = 0; i < M.length(); i++) 
         {
         	Random randomGenerator = new Random();
         	int randomInt = randomGenerator.nextInt(2);
         	key += randomInt;
         }
         return key;
    }
    
    /**
     * The main method.
     *
     * @param args the arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /** The j button1. */
    public static javax.swing.JButton jButton1;
    
    /** The j button2. */
    public javax.swing.JButton jButton2;
    
    /** The j panel1. */
    private javax.swing.JPanel jPanel1;
    
    /** The j panel2. */
    private javax.swing.JPanel jPanel2;
    
    /** The j scroll pane1. */
    private javax.swing.JScrollPane jScrollPane1;
    
    /** The j scroll pane2. */
    public javax.swing.JScrollPane jScrollPane2;
    
    /** The j text area1. */
    public static javax.swing.JTextArea jTextArea1;
    
    /** The j text area2. */
    private static javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}

